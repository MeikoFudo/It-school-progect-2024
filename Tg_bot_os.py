from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import logging
import random
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

audio_dir = 'C:/Users/Ericka/Desktop/Oss_tg_bot/audio'
answers_dir = 'C:/Users/Ericka/Desktop/Oss_tg_bot/answers'
lessons_dir = 'C:/Users/Ericka/Desktop/Oss_tg_bot/lessons'
os.makedirs(answers_dir, exist_ok=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤
def load_lessons(lessons_dir):
    lessons = []
    for file_name in os.listdir(lessons_dir):
        if file_name.endswith('.txt'):
            lesson_path = os.path.join(lessons_dir, file_name)
            with open(lesson_path, 'r', encoding='utf-8') as file:
                lesson_content = file.read()
            lesson_title = file_name.replace('_', ' ').replace('.txt', '').title()
            lessons.append({'title': lesson_title, 'content': lesson_content})
    return lessons


# –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤
lessons = load_lessons(lessons_dir)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Å–µ—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫", callback_data='support')],
        [InlineKeyboardButton("–£—á–∏—Ç—å –æ—Å–µ—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫", callback_data='learn_ossetian')],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')],
    ]
    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_message(text, max_length=4096):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    reply_markup = create_keyboard()
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üåü \n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏-–¥–∏–∫—Ç–∞–Ω—Ç –∏ –ø–æ–º–æ—á—å –Ω–∞–º –≤—ã—è–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. ‚úçÔ∏è \n"
        "–í–∞—à–∏ –¥–∏–∫—Ç–∞–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —è–∑—ã–∫–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è. üéì \n"
        "–¢–∞–∫–∂–µ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–∞–º–æ—É—á–∏—Ç–µ–ª—è –§.–ú. –¢–∞–∫–∞–∑–æ–≤–∞ '–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'. üî• \n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! "
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'support':
        await support_ossetian_language(update, context)
    elif query.data == 'learn_ossetian':
        await learn_ossetian(update, context)
    elif query.data == 'menu':
        await menu_command(update, context)
    elif query.data.startswith('lesson_'):
        lesson_index = int(query.data.replace('lesson_', ''))
        await show_lesson(update, context, lesson_index)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Å–µ—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫"
async def support_ossetian_language(update: Update, context):
    message_text = "–≠—Ç–æ –º–∏–Ω–∏-–¥–∏–∫—Ç–∞–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —É—Å–ª—ã—à–∞–ª–∏ –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏"
    reply_markup = create_keyboard()
    await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
    await send_dictation(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async def send_dictation(update: Update, context):
    audio_files = os.listdir(audio_dir)
    if audio_files:
        audio_file = random.choice(audio_files)
        audio_number = audio_file.split('-')[0].strip()
        audio_path = os.path.join(audio_dir, audio_file)
        await update.callback_query.message.reply_audio(audio=open(audio_path, 'rb'))
        context.user_data['current_audio_number'] = audio_number
    else:
        await update.callback_query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ "–£—á–∏—Ç—å –æ—Å–µ—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫"
async def learn_ossetian(update: Update, context):
    keyboard = [
        [InlineKeyboardButton(f"–£—Ä–æ–∫ {i + 1}: {lesson['title']}", callback_data=f'lesson_{i}')]
        for i, lesson in enumerate(lessons)
    ]
    keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
    await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
async def show_lesson(update: Update, context, lesson_index):
    lesson = lessons[lesson_index]
    lesson_text = lesson['content']
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='learn_ossetian')]])

    lesson_parts = split_message(lesson_text)
    for part in lesson_parts:
        await update.callback_query.message.reply_text(text=part)

    await update.callback_query.message.reply_text(text="–ö–æ–Ω–µ—Ü —É—Ä–æ–∫–∞.", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context):
    user_text = update.message.text
    user_id = update.message.from_user.id

    try:
        audio_number = context.user_data.get('current_audio_number', 'unknown')
        answers_files = os.listdir(answers_dir)
        next_file_number = len(answers_files) + 1
        text_file_path = os.path.join(answers_dir, f'answer_{next_file_number}_{audio_number}.txt')

        with open(text_file_path, 'w', encoding='utf-8') as f:
            f.write(user_text)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üåü \n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏-–¥–∏–∫—Ç–∞–Ω—Ç –∏ –ø–æ–º–æ—á—å –Ω–∞–º –≤—ã—è–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. ‚úçÔ∏è \n"
        "–í–∞—à–∏ –¥–∏–∫—Ç–∞–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —è–∑—ã–∫–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è. üéì "
        "–¢–∞–∫–∂–µ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–∞–º–æ—É—á–∏—Ç–µ–ª—è –§.–ú. –¢–∞–∫–∞–∑–æ–≤–∞ '–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'. üî• \n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! "
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
async def menu_command(update: Update, context):
    commands_list = [
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º",
        "/help - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
    ]
    message_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands_list)
    await update.callback_query.edit_message_text(text=message_text, reply_markup=create_keyboard())


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token("7207211232:AAGOGKdjH96gfdwGr64n5k2uP-R4JmdkMTc").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == '__main__':
    main()
